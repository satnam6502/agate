$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module adder8_tb $end
  $var wire 1 # cin $end
  $var wire 8 $ a [7:0] $end
  $var wire 8 % b [7:0] $end
  $var wire 8 & sum [7:0] $end
  $var wire 1 ' cout $end
  $scope module adder8_inst $end
   $var wire 1 # cin $end
   $var wire 8 $ x [7:0] $end
   $var wire 8 % y [7:0] $end
   $var wire 8 & sum [7:0] $end
   $var wire 1 ' cout $end
   $var wire 1 ' net40 $end
   $var wire 1 ( net39 $end
   $var wire 1 ) net38 $end
   $var wire 1 * net37 $end
   $var wire 1 + net36 $end
   $var wire 1 , net35 $end
   $var wire 1 - net34 $end
   $var wire 1 . net33 $end
   $var wire 1 / net32 $end
   $var wire 1 0 net31 $end
   $var wire 1 1 net30 $end
   $var wire 1 2 net29 $end
   $var wire 1 3 net28 $end
   $var wire 1 4 net27 $end
   $var wire 1 5 net26 $end
   $var wire 1 6 net25 $end
   $var wire 1 7 net24 $end
   $var wire 1 8 net23 $end
   $var wire 1 9 net22 $end
   $var wire 1 : net21 $end
   $var wire 1 ; net20 $end
   $var wire 1 < net19 $end
   $var wire 1 = net18 $end
   $var wire 1 > net17 $end
   $var wire 1 ? net16 $end
   $var wire 1 @ net15 $end
   $var wire 1 A net14 $end
   $var wire 1 B net13 $end
   $var wire 1 C net12 $end
   $var wire 1 D net11 $end
   $var wire 1 E net10 $end
   $var wire 1 F net9 $end
   $var wire 1 G net8 $end
   $var wire 1 H net7 $end
   $var wire 1 I net6 $end
   $var wire 1 J net5 $end
   $var wire 1 K net4 $end
   $var wire 1 L net3 $end
   $var wire 1 M net2 $end
   $var wire 1 N net1 $end
   $var wire 1 # net0 $end
   $var wire 8 $ vec0 [7:0] $end
   $var wire 8 % vec1 [7:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b00001100 $
b00000101 %
b00010001 &
0'
0(
0)
0*
0+
0,
0-
0.
0/
00
01
02
03
04
05
06
07
18
09
0:
1;
1<
0=
0>
1?
1@
0A
0B
1C
0D
0E
0F
0G
0H
0I
0J
0K
1L
0M
1N
#10
